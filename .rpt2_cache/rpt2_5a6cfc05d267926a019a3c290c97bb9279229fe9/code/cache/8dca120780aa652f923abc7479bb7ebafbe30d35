{"map":"{\"version\":3,\"file\":\"mergeConfig.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/core/mergeConfig.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAA;AAE1D,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;AAElC,SAAS,YAAY,CAAC,IAAS,EAAE,IAAS;IACxC,OAAO,OAAO,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAA;AAClD,CAAC;AAED,SAAS,aAAa,CAAC,IAAS,EAAE,IAAS;IACzC,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;QAC/B,OAAO,IAAI,CAAA;KACZ;AACH,CAAC;AAED,SAAS,cAAc,CAAC,IAAS,EAAE,IAAS;IAC1C,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE;QACvB,OAAO,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;KAC7B;SAAM,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;QACtC,OAAO,IAAI,CAAA;KACZ;SAAM,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE;QAC9B,OAAO,SAAS,CAAC,IAAI,CAAC,CAAA;KACvB;SAAM;QACL,OAAO,IAAI,CAAA;KACZ;AACH,CAAC;AAED,IAAM,iBAAiB,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAA;AAEnD,iBAAiB,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,EAA7B,CAA6B,CAAC,CAAA;AAE/D,IAAM,kBAAkB,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;AAE9C,kBAAkB,CAAC,OAAO,CAAC,UAAA,GAAG;IAC5B,MAAM,CAAC,GAAG,CAAC,GAAG,cAAc,CAAA;AAC9B,CAAC,CAAC,CAAA;AAEF,MAAM,CAAC,OAAO,UAAU,WAAW,CACjC,OAA2B,EAC3B,OAA4B;IAE5B,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,GAAG,EAAE,CAAA;KACb;IAED,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAElC,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;QACvB,UAAU,CAAC,GAAG,CAAC,CAAA;KAChB;IAED,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE;QACvB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACjB,UAAU,CAAC,GAAG,CAAC,CAAA;SAChB;KACF;IAED,SAAS,UAAU,CAAC,GAAW;QAC7B,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,YAAY,CAAA;QACzC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,OAAQ,CAAC,GAAG,CAAC,CAAC,CAAA;IAClD,CAAC;IAED,OAAO,MAAM,CAAA;AACf,CAAC\"}","code":"import { isPlainObject, deepMerge } from '../helpers/util';\r\nvar strats = Object.create(null);\r\nfunction defaultStart(val1, val2) {\r\n    return typeof val2 !== 'undefined' ? val2 : val1;\r\n}\r\nfunction fromVal2Strat(val1, val2) {\r\n    if (typeof val2 !== 'undefined') {\r\n        return val2;\r\n    }\r\n}\r\nfunction deepMergeStrat(val1, val2) {\r\n    if (isPlainObject(val2)) {\r\n        return deepMerge(val1, val2);\r\n    }\r\n    else if (typeof val2 !== 'undefined') {\r\n        return val2;\r\n    }\r\n    else if (isPlainObject(val1)) {\r\n        return deepMerge(val1);\r\n    }\r\n    else {\r\n        return val1;\r\n    }\r\n}\r\nvar stratKeysFromVal2 = ['url', 'params', 'data'];\r\nstratKeysFromVal2.forEach(function (key) { return (strats[key] = fromVal2Strat); });\r\nvar stratKeysDeepMerge = ['headers', 'auth'];\r\nstratKeysDeepMerge.forEach(function (key) {\r\n    strats[key] = deepMergeStrat;\r\n});\r\nexport default function mergeConfig(config1, config2) {\r\n    if (!config2) {\r\n        config2 = {};\r\n    }\r\n    var config = Object.create(null);\r\n    for (var key in config2) {\r\n        mergeField(key);\r\n    }\r\n    for (var key in config1) {\r\n        if (!config2[key]) {\r\n            mergeField(key);\r\n        }\r\n    }\r\n    function mergeField(key) {\r\n        var strat = strats[key] || defaultStart;\r\n        config[key] = strat(config1[key], config2[key]);\r\n    }\r\n    return config;\r\n}\r\n//# sourceMappingURL=mergeConfig.js.map","dts":{"name":"/Users/zzt/Documents/ts-axios-doc/project/ts-axios/dist/types/core/mergeConfig.d.ts","writeByteOrderMark":false,"text":"import { AxiosRequestConfig } from '../types';\r\nexport default function mergeConfig(config1: AxiosRequestConfig, config2?: AxiosRequestConfig): AxiosRequestConfig;\r\n"}}
