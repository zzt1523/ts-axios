{"map":"{\"version\":3,\"file\":\"interceptormanager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/core/interceptormanager.ts\"],\"names\":[],\"mappings\":\"AAOA;IAEE;QACE,IAAI,CAAC,YAAY,GAAG,EAAE,CAAA;IACxB,CAAC;IACD,gCAAG,GAAH,UAAI,QAAuB,EAAE,QAAqB;QAChD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;YACrB,QAAQ,UAAA;YACR,QAAQ,UAAA;SACT,CAAC,CAAA;QACF,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAA;IACrC,CAAC;IACD,oCAAO,GAAP,UAAQ,EAAyC;QAC/C,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAA,YAAY;YACpC,IAAI,YAAY,KAAK,IAAI,EAAE;gBACzB,EAAE,CAAC,YAAY,CAAC,CAAA;aACjB;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IACD,kCAAK,GAAL,UAAM,EAAU;QACd,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE;YACzB,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,IAAI,CAAA;SAC7B;IACH,CAAC;IACH,yBAAC;AAAD,CAAC,AAxBD,IAwBC\"}","code":"var InterceptorManager = /** @class */ (function () {\r\n    function InterceptorManager() {\r\n        this.interceptors = [];\r\n    }\r\n    InterceptorManager.prototype.use = function (resolved, rejected) {\r\n        this.interceptors.push({\r\n            resolved: resolved,\r\n            rejected: rejected\r\n        });\r\n        return this.interceptors.length - 1;\r\n    };\r\n    InterceptorManager.prototype.forEach = function (fn) {\r\n        this.interceptors.forEach(function (interceptors) {\r\n            if (interceptors !== null) {\r\n                fn(interceptors);\r\n            }\r\n        });\r\n    };\r\n    InterceptorManager.prototype.eject = function (id) {\r\n        if (this.interceptors[id]) {\r\n            this.interceptors[id] = null;\r\n        }\r\n    };\r\n    return InterceptorManager;\r\n}());\r\nexport default InterceptorManager;\r\n//# sourceMappingURL=interceptormanager.js.map","dts":{"name":"/Users/zzt/Documents/ts-axios-doc/project/ts-axios/dist/types/core/interceptormanager.d.ts","writeByteOrderMark":false,"text":"import { RejectedFn, ResolvedFn } from '../types';\r\ninterface Interceptor<T> {\r\n    resolved: ResolvedFn<T>;\r\n    rejected?: RejectedFn;\r\n}\r\nexport default class InterceptorManager<T> {\r\n    private interceptors;\r\n    constructor();\r\n    use(resolved: ResolvedFn<T>, rejected?: RejectedFn): number;\r\n    forEach(fn: (interceptor: Interceptor<T>) => void): void;\r\n    eject(id: number): void;\r\n}\r\nexport {};\r\n"}}
